Here is the requested bash script with detailed comments explaining each line. The script includes the use of **variables**, a **for loop**, and logic to **search for lines in a file**, and **add them if they don’t exist**. The file being modified in these examples is `/etc/named.conf`.

---

### 1. **Simple Example** (Add lines to a file if not already present)


#!/bin/bash

# Define the file to be modified
file_to_check="/etc/named.conf"  # This variable stores the path to the configuration file

# Define the lines to search for and add if missing
lines_to_add=(
    "options {"  # Opening configuration block
    "    directory \"/var/named\";"  # Directory setting for the named service
    "    listen-on port 53 { 127.0.0.1; };"  # Listen on port 53 for localhost
    "};"  # Closing configuration block
)

# Loop through each line in the lines_to_add array
for line in "${lines_to_add[@]}"; do
    # Check if the line is already in the file
    if ! grep -Fxq "$line" "$file_to_check"; then  # grep checks if the exact line is in the file (-F: fixed string, -x: whole line, -q: quiet mode)
        echo "Adding line: '$line' to $file_to_check"  # Inform the user that the line is missing and will be added
        echo "$line" | sudo tee -a "$file_to_check" > /dev/null  # Append the missing line to the file using tee with sudo, suppress output
    else
        echo "Line already exists: '$line'"  # If the line exists, inform the user
    fi
done  # End of the loop


### Explanation:
- **Variables**: `file_to_check` holds the path to `/etc/named.conf`, while `lines_to_add` is an array containing the configuration lines.
- **For Loop**: Iterates over the lines to check if they exist in the file.
- **`grep -Fxq`**: Searches for the exact match of the line in the file.
- **`tee -a`**: Appends the line to the file if it doesn’t exist.

---

### 2. **Medium Example** (Add multiple configurations if missing, including comments)

#!/bin/bash

# Define the file to be modified
file_to_check="/etc/named.conf"  # Store the path of the file that will be modified

# Array of configurations to check/add
lines_to_add=(
    "# Setting up named configuration"  # Comment to indicate the start of the configuration block
    "options {"  # Opening block for configuration options
    "    directory \"/var/named\";"  # Directory setting for the named service
    "    allow-query { localhost; };"  # Allow queries only from localhost
    "};"  # Closing block for configuration options
    "# End of named configuration"  # Comment to indicate the end of the configuration block
)

# Loop through each line and add it to the file if it’s missing
for line in "${lines_to_add[@]}"; do
    if ! grep -Fxq "$line" "$file_to_check"; then  # Check if the line exists in the file
        echo "Adding configuration: '$line' to $file_to_check"  # Inform the user the line will be added
        echo "$line" | sudo tee -a "$file_to_check" > /dev/null  # Append the missing line to the file
    else
        echo "Configuration already exists: '$line'"  # Inform the user that the line already exists
    fi
done  # End of the loop
```

### Explanation:
- **Comments in Configuration**: The script includes comments around the configuration for clarity when modifying `/etc/named.conf`.
- **Array of lines**: Each line, including the comments, is checked and added if not already present.
- **For Loop**: Iterates over the list of lines, checking if they exist in the file using `grep`.

---

### 3. **Advanced Example** (Validate and add multiple sections of configurations)


#!/bin/bash

# Define the file to modify
file_to_check="/etc/named.conf"  # Variable that stores the path to the file

# Define the lines for a complete section to be added
lines_to_add=(
    "# DNS forwarding settings"  # Comment indicating the start of DNS forwarding settings
    "forwarders {"  # Opening block for DNS forwarders
    "    8.8.8.8;"  # Google's public DNS server 1
    "    8.8.4.4;"  # Google's public DNS server 2
    "};"  # Closing block for DNS forwarders
    "# End of DNS forwarding settings"  # Comment indicating the end of DNS forwarding settings
)

# A flag to track if any lines are missing
lines_missing=false  # Initialize a flag variable to false (indicating no lines are missing initially)

# Loop through each line and check if it exists in the file
for line in "${lines_to_add[@]}"; do
    if ! grep -Fxq "$line" "$file_to_check"; then  # Check if the line is missing in the file
        echo "Missing line: '$line'"  # Inform the user which line is missing
        lines_missing=true  # Set the flag to true if a line is missing
    fi
done  # End of the loop

# If any lines are missing, add the entire section
if [ "$lines_missing" = true ]; then  # Check if any line was missing by evaluating the flag
    echo "Adding missing configuration to $file_to_check"  # Inform the user that the section will be added
    for line in "${lines_to_add[@]}"; do  # Loop through each line again to add them
        echo "$line" | sudo tee -a "$file_to_check" > /dev/null  # Append each line to the file
    done
else
    echo "All lines are already present in $file_to_check"  # Inform the user that all lines are already present
fi  # End of the if-else block
```

### Explanation:
- **Flag `lines_missing`**: A flag is used to check if any line is missing. If any line is missing, it sets the flag to `true`.
- **For Loop**: The first loop checks if any lines are missing, while the second loop adds the entire section if any part of it is missing.
- **If Condition**: If the flag is set to `true` (i.e., some lines are missing), the script appends the entire section to the file.

---

### Key Concepts and Comments:

1. **Variables**: Store the path to the file (`file_to_check`) and the lines (`lines_to_add`) to be checked and added.
2. **For Loops**: Iterate over each line to search for its presence in the file.
3. **Conditionals**: Use `if` statements to determine whether lines already exist in the file and whether they need to be added.
4. **`grep` Usage**: `grep -Fxq` is used to search for exact, whole-line matches in the file, and the `-q` flag ensures quiet operation.
5. **Appending Lines**: `tee -a` is used with `sudo` to append missing lines to the file, suppressing standard output with `> /dev/null`.

---

This fully commented script provides a clear understanding of how each component works and how to manage configurations in a file like `/etc/named.conf` using **loops**, **variables**, and **conditional statements**. Let me know if you'd like more customization!