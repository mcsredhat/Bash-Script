Here’s the rewritten bash script that incorporates **arrays**, **lists**, and uses both **local** and **global** variables, with detailed comments explaining each line. The goal remains the same: to check if certain lines exist in a file (e.g., `/etc/named.conf`) and add them if they are missing.

---

### **Advanced Bash Script Example with Arrays, Local/Global Variables, Lists**

```bash
#!/bin/bash

# Global variable that defines the file we want to modify
global_file_to_check="/etc/named.conf"  # Global variable holding the file path

# Global array that defines the lines to search for and add if missing
global_lines_to_add=(
    "# DNS forwarding settings"  # Comment indicating start of DNS forwarding settings
    "forwarders {"  # Opening block for DNS forwarders
    "    8.8.8.8;"  # Google's public DNS server 1
    "    8.8.4.4;"  # Google's public DNS server 2
    "};"  # Closing block for DNS forwarders
    "# End of DNS forwarding settings"  # Comment indicating end of DNS forwarding settings
)

# Function to check if lines are missing and add them if necessary
add_lines_if_missing() {
    local file="$1"  # Local variable to hold the file name passed as an argument
    local -n lines_list="$2"  # Local reference to an array (lines to check/add)
    local missing_flag=false  # Local variable flag to track if any line is missing

    # Loop through each line in the lines_list array
    for line in "${lines_list[@]}"; do
        # Check if the line exists in the file
        if ! grep -Fxq "$line" "$file"; then  # If the line is missing (-F: fixed string, -x: whole line, -q: quiet)
            echo "Line missing: '$line'"  # Output which line is missing
            missing_flag=true  # Set the flag to true to indicate a missing line
        fi
    done

    # If any lines were missing, add the entire block of lines to the file
    if [ "$missing_flag" = true ]; then  # Check if the flag is set to true (indicating missing lines)
        echo "Adding missing lines to $file"  # Inform the user that lines will be added
        for line in "${lines_list[@]}"; do  # Loop through the array again to add the lines
            echo "$line" | sudo tee -a "$file" > /dev/null  # Append the missing lines to the file using tee
        done
    else
        echo "All lines are already present in $file"  # Inform the user that all lines are already present
    fi
}

# Main function that controls the script's flow
main() {
    # Example of a local array defined within the main function (could be for additional configurations)
    local local_additional_lines=(
        "# Local configuration section"  # Comment indicating start of additional configuration
        "logging {"  # Opening block for logging configuration
        "    channel default_debug {"  # Specify logging channel
        "        file \"/var/named/data/named.run\";"  # Log file location
        "        severity dynamic;"  # Set logging severity
        "    };"  # Close logging channel
        "};"  # Close logging configuration block
        "# End of local configuration"  # Comment indicating end of additional configuration
    )

    # Call the function to check and add lines using global variables
    add_lines_if_missing "$global_file_to_check" global_lines_to_add  # Passing global file and lines array

    # Call the function again with local array (optional additional lines to be added)
    add_lines_if_missing "$global_file_to_check" local_additional_lines  # Passing global file and local array
}

# Execute the main function
main  # Start the main script execution
```

### Detailed Explanation:

#### **Global Variables:**
- **`global_file_to_check`**: This global variable stores the path to the file we want to modify (`/etc/named.conf`).
- **`global_lines_to_add`**: This global array contains the lines that we are checking for in the file. If they don’t exist, the script adds them. These lines include DNS forwarders and their corresponding comments.

#### **Function `add_lines_if_missing`:**
- **Parameters**:
  - **`file="$1"`**: A local variable to hold the file path passed as an argument.
  - **`local -n lines_list="$2"`**: This declares a local variable `lines_list` as a reference to the array passed as the second argument. The `-n` flag allows us to reference an existing array (whether it's global or local).
  - **`local missing_flag=false`**: A local flag variable initialized to `false`. It tracks whether any lines are missing.
- **For Loop**: 
  - Iterates over each line in the array (`lines_list`). For each line, it checks if it exists in the file using `grep -Fxq`.
  - If a line is missing, it sets `missing_flag=true` and informs the user which line is missing.
- **If Condition**: 
  - After the loop, if any line is missing (`missing_flag=true`), it appends the entire block of lines to the file using `sudo tee -a`.
  - If no lines are missing, it prints that all lines are already present in the file.

#### **Main Function:**
- **Local Array `local_additional_lines`**: 
  - This is an additional array defined inside the `main` function, demonstrating the use of local variables. It contains lines for a separate configuration section (e.g., logging settings).
- **Calling `add_lines_if_missing`**:
  - First, it calls the function with the global variables `global_file_to_check` and `global_lines_to_add` to check for and add the DNS forwarding lines.
  - Then, it calls the function again with the same file but using the **local array** `local_additional_lines` to optionally add a separate block of configurations.

#### **Main Execution:**
- The script ends by calling the `main` function, which manages the flow of execution by checking both the global lines and optional local lines.

---

### Summary of New Concepts:

1. **Global Variables**:
   - `global_file_to_check` and `global_lines_to_add` are global variables accessible throughout the script.
2. **Local Variables**:
   - `file`, `lines_list`, and `missing_flag` inside the `add_lines_if_missing` function are local variables. The `local_additional_lines` array in the `main` function is another local variable.
3. **Array Reference (`local -n`)**:
   - This allows passing arrays by reference to the function, so the function can operate on any array (global or local).
4. **For Loops**:
   - Used to iterate over arrays of lines to check if they exist in the file.
5. **Function Usage**:
   - The script uses functions to break the logic into reusable pieces, handling different parts of the configuration checking and addition process.

This structure enhances flexibility and readability by using variables, arrays, and functions to simplify the script. Let me know if you need further clarifications or adjustments!